//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IShoppingWebService")]
    public interface IShoppingWebService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/AddItem", ReplyAction="http://tempuri.org/IShoppingWebService/AddItemResponse")]
        int AddItem(string productName, int stockQuentity, string description, float price, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/AddItem", ReplyAction="http://tempuri.org/IShoppingWebService/AddItemResponse")]
        System.Threading.Tasks.Task<int> AddItemAsync(string productName, int stockQuentity, string description, float price, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/getAllItems", ReplyAction="http://tempuri.org/IShoppingWebService/getAllItemsResponse")]
        string[][] getAllItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/getAllItems", ReplyAction="http://tempuri.org/IShoppingWebService/getAllItemsResponse")]
        System.Threading.Tasks.Task<string[][]> getAllItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/editItem", ReplyAction="http://tempuri.org/IShoppingWebService/editItemResponse")]
        int editItem(int userID, string productName, int stockQuentity, string description, float price, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/editItem", ReplyAction="http://tempuri.org/IShoppingWebService/editItemResponse")]
        System.Threading.Tasks.Task<int> editItemAsync(int userID, string productName, int stockQuentity, string description, float price, int categoryID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/deleteItem", ReplyAction="http://tempuri.org/IShoppingWebService/deleteItemResponse")]
        int deleteItem(int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/deleteItem", ReplyAction="http://tempuri.org/IShoppingWebService/deleteItemResponse")]
        System.Threading.Tasks.Task<int> deleteItemAsync(int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/Register", ReplyAction="http://tempuri.org/IShoppingWebService/RegisterResponse")]
        int Register(string userName, string userEmail, string userPassword, string userPhoneNumber, string userAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/Register", ReplyAction="http://tempuri.org/IShoppingWebService/RegisterResponse")]
        System.Threading.Tasks.Task<int> RegisterAsync(string userName, string userEmail, string userPassword, string userPhoneNumber, string userAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/login", ReplyAction="http://tempuri.org/IShoppingWebService/loginResponse")]
        int login(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/login", ReplyAction="http://tempuri.org/IShoppingWebService/loginResponse")]
        System.Threading.Tasks.Task<int> loginAsync(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/getItemById", ReplyAction="http://tempuri.org/IShoppingWebService/getItemByIdResponse")]
        string[] getItemById(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/getItemById", ReplyAction="http://tempuri.org/IShoppingWebService/getItemByIdResponse")]
        System.Threading.Tasks.Task<string[]> getItemByIdAsync(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/addCategory", ReplyAction="http://tempuri.org/IShoppingWebService/addCategoryResponse")]
        int addCategory(string categoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/addCategory", ReplyAction="http://tempuri.org/IShoppingWebService/addCategoryResponse")]
        System.Threading.Tasks.Task<int> addCategoryAsync(string categoryName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/order", ReplyAction="http://tempuri.org/IShoppingWebService/orderResponse")]
        int order(int userID, int[][] cart, double totalPrice, string payment_method);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/order", ReplyAction="http://tempuri.org/IShoppingWebService/orderResponse")]
        System.Threading.Tasks.Task<int> orderAsync(int userID, int[][] cart, double totalPrice, string payment_method);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/getCategories", ReplyAction="http://tempuri.org/IShoppingWebService/getCategoriesResponse")]
        string[][] getCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IShoppingWebService/getCategories", ReplyAction="http://tempuri.org/IShoppingWebService/getCategoriesResponse")]
        System.Threading.Tasks.Task<string[][]> getCategoriesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IShoppingWebServiceChannel : ServiceReference1.IShoppingWebService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ShoppingWebServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IShoppingWebService>, ServiceReference1.IShoppingWebService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ShoppingWebServiceClient() : 
                base(ShoppingWebServiceClient.GetDefaultBinding(), ShoppingWebServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IShoppingWebService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ShoppingWebServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(ShoppingWebServiceClient.GetBindingForEndpoint(endpointConfiguration), ShoppingWebServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ShoppingWebServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ShoppingWebServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ShoppingWebServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ShoppingWebServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ShoppingWebServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public int AddItem(string productName, int stockQuentity, string description, float price, int categoryID)
        {
            return base.Channel.AddItem(productName, stockQuentity, description, price, categoryID);
        }
        
        public System.Threading.Tasks.Task<int> AddItemAsync(string productName, int stockQuentity, string description, float price, int categoryID)
        {
            return base.Channel.AddItemAsync(productName, stockQuentity, description, price, categoryID);
        }
        
        public string[][] getAllItems()
        {
            return base.Channel.getAllItems();
        }
        
        public System.Threading.Tasks.Task<string[][]> getAllItemsAsync()
        {
            return base.Channel.getAllItemsAsync();
        }
        
        public int editItem(int userID, string productName, int stockQuentity, string description, float price, int categoryID)
        {
            return base.Channel.editItem(userID, productName, stockQuentity, description, price, categoryID);
        }
        
        public System.Threading.Tasks.Task<int> editItemAsync(int userID, string productName, int stockQuentity, string description, float price, int categoryID)
        {
            return base.Channel.editItemAsync(userID, productName, stockQuentity, description, price, categoryID);
        }
        
        public int deleteItem(int productID)
        {
            return base.Channel.deleteItem(productID);
        }
        
        public System.Threading.Tasks.Task<int> deleteItemAsync(int productID)
        {
            return base.Channel.deleteItemAsync(productID);
        }
        
        public int Register(string userName, string userEmail, string userPassword, string userPhoneNumber, string userAddress)
        {
            return base.Channel.Register(userName, userEmail, userPassword, userPhoneNumber, userAddress);
        }
        
        public System.Threading.Tasks.Task<int> RegisterAsync(string userName, string userEmail, string userPassword, string userPhoneNumber, string userAddress)
        {
            return base.Channel.RegisterAsync(userName, userEmail, userPassword, userPhoneNumber, userAddress);
        }
        
        public int login(string userName, string pass)
        {
            return base.Channel.login(userName, pass);
        }
        
        public System.Threading.Tasks.Task<int> loginAsync(string userName, string pass)
        {
            return base.Channel.loginAsync(userName, pass);
        }
        
        public string[] getItemById(int itemId)
        {
            return base.Channel.getItemById(itemId);
        }
        
        public System.Threading.Tasks.Task<string[]> getItemByIdAsync(int itemId)
        {
            return base.Channel.getItemByIdAsync(itemId);
        }
        
        public int addCategory(string categoryName)
        {
            return base.Channel.addCategory(categoryName);
        }
        
        public System.Threading.Tasks.Task<int> addCategoryAsync(string categoryName)
        {
            return base.Channel.addCategoryAsync(categoryName);
        }
        
        public int order(int userID, int[][] cart, double totalPrice, string payment_method)
        {
            return base.Channel.order(userID, cart, totalPrice, payment_method);
        }
        
        public System.Threading.Tasks.Task<int> orderAsync(int userID, int[][] cart, double totalPrice, string payment_method)
        {
            return base.Channel.orderAsync(userID, cart, totalPrice, payment_method);
        }
        
        public string[][] getCategories()
        {
            return base.Channel.getCategories();
        }
        
        public System.Threading.Tasks.Task<string[][]> getCategoriesAsync()
        {
            return base.Channel.getCategoriesAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IShoppingWebService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IShoppingWebService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:63088/ShoppingWebService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ShoppingWebServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IShoppingWebService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ShoppingWebServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IShoppingWebService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IShoppingWebService,
        }
    }
}
